<template>
	<list class="content">
		<cell v-for="(item,index) in datalist" :key="index" @click="jumpDetailPage(item)" style="width: 750rpx; align-items: center;">
			<view class="list-item">
				<view class="list-item-top">
					<text class="list-item-top-txt">{{ item.author }}</text>
					<text class="list-item-top-txt">{{ item.niceDate }}</text>
				</view>
			
				<view class="list-item-image">
					<view v-if="item.envelopePic != ''"><image :src="item.envelopePic" mode="scaleToFill" style="width: 120upx; height: 120upx;margin-right: 20upx;"></image></view>
					<text decode="true" class="list-item-title">{{ item.title }}</text>
				</view>
			
				<view class="list-item-bottom">
					<text class="list-item-chapter">{{ item.chapterName }}</text>
					<text class="yticon icon-shoucang shoucang" @click.stop="favoriteItem(index)">{{ '\ue645' }}</text>
				</view>
			</view>
		</cell>
		<loading @loading="onloading" :display="isLoadMore ? 'show' : 'hide'">
			<text style="width: 750rpx; height: 100rpx; line-height: 100rpx; text-align: center;">加载更多...</text>
		</loading>
	</list>
</template>

<script>
	import { getFavoriteList } from '../../api/favoriteListApi.js'
	import { uncollect } from '../../api/uncollectApi.js'
	
	export default {
		data() {
			return {
				isLoadMore: false,
				pagesize: 1,
				datalist: []
			}
		},
		onLoad() {
			this.loadData();
		},
		onPullDownRefresh() {
			this.loadData();
		},
		methods: {
			loadData: function() {
				//获取收藏列表
				this.datalist = [];
				this.loadListData();
			},
			onloading: function() {
				if(this.isLoadMore) return;
				
				setTimeout(() => {
					this.isLoadMore = true;
					this.loadListData(this.pagesize);
				}, 1000);
			},
			loadListData: function(pagesize) {
				//获取收藏列表
				getFavoriteList(pagesize).then(res => {
					this.datalist = this.datalist.concat(res.data.datas);
					this.pagesize++;
					
					this.isLoadMore = false;
					uni.stopPullDownRefresh();
				}).catch(error => {
					this.isLoadMore = false;
					uni.stopPullDownRefresh();
				})
			},
			jumpDetailPage: function(item) {
				uni.navigateTo({
					url: '/pages/detailPage/detailPage?url=' + item.link + '&title=' + item.title
				});
			},
			//收藏
			favoriteItem: function(index){
				//通知后台取消收藏
				uncollect(this.datalist[index].id, {'Content-Type':'application/x-www-form-urlencoded; charset=utf-8'}, { "originId":this.datalist[index].originId }).then(res => {
					console.log(res);
					this.datalist.splice(index , 1);
				}).catch(error => {
					console.log(error);
				});
			}
		}
	}
</script>

<style lang="scss">
.content {
	/* position: fixed; */
	/* width: 100%;
	height: 100%;
	display: flex;
	flex-direction: column; */
	flex: 1;
	align-items: center;
	background-color: #eeeeee;
}

.swiper {
	/* width: 100%; */
	height: 380rpx;
}

.swiper-item {
	/* width: 100%;
	height: 100%; */
	flex: 1;
	padding: 0;
}

.list-item {
	width: 660rpx;
	position: relative;
	/* display: flex;
	flex-direction: column; */
	padding: 20rpx;
	margin-top: 20rpx;
	margin-left: 20rpx;
	margin-right: 20rpx;
	border-radius: 16rpx;
	background-color: white;
	/* box-shadow: 5px 5px 10px #c8c7cc; */
}
.list-item-top {
	/* width: 100%; */
	/* display: flex; */
	flex-direction: row;
	justify-content: space-between;
	margin-bottom: 20rpx;
}

.list-item-top-txt {
	font-size: 25rpx;
	color: #999999;
}

.list-item-image {
	/* display: flex; */
	flex-direction: row;
}
.list-item-title {
	/* width: auto; */
	position: relative;
	font-size: 30rpx;
	color: $uni-text-color;
	/* display: inline-block; */
}
.list-item-bottom{
	/* width: 100%;
	display: flex; */
	flex-direction: row;
	justify-content: space-between;
		align-items: center;
}
.shoucang{
	color: #ff0000;
}

.list-item-chapter {
	margin-top: 10rpx;
	font-size: 25rpx;
	color: #999999;
}
</style>
